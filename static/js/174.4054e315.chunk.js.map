{"version":3,"file":"static/js/174.4054e315.chunk.js","mappings":"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","sources":["components/OurProducts/Konvas/Flow.js"],"sourcesContent":["import { useState, useEffect, forwardRef, useImperativeHandle, useRef } from 'react';\nimport { Stage, Layer, Rect, Line, Text } from 'react-konva';\n\nconst Flow = forwardRef(({\n  dimensions,\n  productWidth,\n  productDepth,\n  mattressWidth,\n  mattressDepth,\n  headDepth,\n  setHeadDepth,\n  tsargWidth,\n  setTsargWidth\n}, ref) => {\n\n  const [scaleFactor, setScaleFactor] = useState(1);\n  const stageRef = useRef(null);\n\n  const bedTotalDepth = productDepth * scaleFactor;\n  const bedTotalWidth = productWidth * scaleFactor;\n\n  const sleepingWidth = (mattressWidth + 1) * scaleFactor;\n  const sleepingDepth = (mattressDepth + 2) * scaleFactor;\n\n  const head = headDepth * scaleFactor;\n  const tsarg = tsargWidth * scaleFactor;\n\n  const offsetX = dimensions.width / 2;\n  const offsetY = dimensions.height / 2;\n\n  useEffect(() => {\n    const value = Math.min(\n      (0.7 * dimensions.width) / productWidth,\n      (0.7 * dimensions.height) / productDepth\n    );\n    if (value > 0) {\n      setScaleFactor(value);\n    }\n  }, [dimensions, productWidth, productDepth]);\n\n  useEffect(() => {\n    setHeadDepth(23);\n    setTsargWidth(6);\n  }, [setHeadDepth, setTsargWidth])\n\n  useImperativeHandle(ref, () => ({\n    getImage() {\n      return stageRef.current.toDataURL({ mimeType: 'image/jpeg', quality: 1 });\n    }\n  }));\n\n  return (\n    <div>\n      <Stage ref={stageRef} width={dimensions.width} height={dimensions.height}>\n      <Layer>\n        <Rect\n            x={0}\n            y={0}\n            width={dimensions.width}\n            height={dimensions.height}\n            fill={'#FFF'}\n          />\n        </Layer>\n        <Layer>\n            {/* Head */}\n          <Rect\n            x={offsetX - (bedTotalWidth / 2)}\n            y={offsetY - (bedTotalDepth / 2)}\n            width={bedTotalWidth / 2}\n            height={head}\n            stroke=\"black\"\n            strokeWidth={1}\n            cornerRadius={3}\n          />\n          <Rect\n            x={offsetX}\n            y={offsetY - (bedTotalDepth / 2)}\n            width={bedTotalWidth / 2}\n            height={head}\n            stroke=\"black\"\n            strokeWidth={1}\n            cornerRadius={3}\n          />\n          {/* Out */}\n          <Rect\n            x={offsetX - (sleepingWidth / 2) - tsarg}\n            y={offsetY - (bedTotalDepth / 2) + (head)}\n            width={sleepingWidth + (tsarg * 2)}\n            height={sleepingDepth + tsarg}\n            stroke=\"black\"\n            strokeWidth={1}\n            cornerRadius={5}\n          />\n          {/* Mattress */}\n          <Rect\n            x={offsetX - ((mattressWidth * scaleFactor) / 2)}\n            y={offsetY - (bedTotalDepth / 2) + head + scaleFactor}\n            width={mattressWidth * scaleFactor}\n            height={mattressDepth * scaleFactor}\n            stroke=\"black\"\n            strokeWidth={1}\n            cornerRadius={8}\n          />\n        </Layer>\n        <Layer>\n          <Line\n            points={[\n              offsetX + 50,\n              offsetY + (bedTotalDepth / 2) + (17 * scaleFactor),\n              offsetX + (bedTotalWidth / 2),\n              offsetY + (bedTotalDepth / 2) + (17 * scaleFactor),\n            ]}\n            stroke=\"black\"\n            strokeWidth={1}\n            closed={false}\n          />\n          <Line\n            points={[\n              offsetX - 50,\n              offsetY + (bedTotalDepth / 2) + (17 * scaleFactor),\n              offsetX - (bedTotalWidth / 2),\n              offsetY + (bedTotalDepth / 2) + (17 * scaleFactor),\n            ]}\n            stroke=\"black\"\n            strokeWidth={1}\n            closed={false}\n          />\n          <Text\n            x={offsetX - 50}\n            y={offsetY + (bedTotalDepth / 2) + (17 * scaleFactor) - 9}\n            text={productWidth}\n            width={100}\n            align=\"center\"\n            fontSize={18}\n          />\n          <Line\n            points={[\n              offsetX - (bedTotalWidth / 1.7),\n              offsetY - (bedTotalDepth / 2),\n              offsetX - (bedTotalWidth / 1.7),\n              offsetY - 50,\n            ]}\n            stroke=\"black\"\n            strokeWidth={1}\n            closed={false}\n          />\n          <Line\n            points={[\n              offsetX - (bedTotalWidth / 1.7),\n              offsetY + 50,\n              offsetX - (bedTotalWidth / 1.7),\n              offsetY + (bedTotalDepth / 2),\n            ]}\n            stroke=\"black\"\n            strokeWidth={1}\n            closed={false}\n          />\n          <Text\n            x={offsetX - (bedTotalWidth / 1.7) - 9}\n            y={offsetY + 50}\n            text={productDepth}\n            width={100}\n            align=\"center\"\n            rotation={270}\n            fontSize={18}\n          />\n        </Layer>\n        <Layer>\n          <Line\n            points={[\n              offsetX + 50,\n              offsetY + (bedTotalDepth / 2) - tsarg - (10 * scaleFactor),\n              offsetX + (sleepingWidth / 2) - (10 * scaleFactor),\n              offsetY + (bedTotalDepth / 2) - tsarg - (10 * scaleFactor),\n            ]}\n            stroke=\"black\"\n            strokeWidth={1}\n            closed={false}\n          />\n          <Line\n            points={[\n              offsetX - 50,\n              offsetY + (bedTotalDepth / 2) - tsarg - (10 * scaleFactor),\n              offsetX - (sleepingWidth / 2) + (10 * scaleFactor),\n              offsetY + (bedTotalDepth / 2) - tsarg - (10 * scaleFactor),\n            ]}\n            stroke=\"black\"\n            strokeWidth={1}\n            closed={false}\n          />\n          <Text\n            x={offsetX - 50}\n            y={offsetY + (bedTotalDepth / 2) - tsarg - (10 * scaleFactor) - 9}\n            text={mattressWidth}\n            width={100}\n            align=\"center\"\n            fontSize={18}\n          />\n          <Line\n            points={[\n              offsetX - (sleepingWidth / 2) + (10 * scaleFactor),\n              offsetY - (bedTotalDepth / 2) + head + scaleFactor + (10 * scaleFactor),\n              offsetX - (sleepingWidth / 2) + (10 * scaleFactor),\n              offsetY - 50,\n            ]}\n            stroke=\"black\"\n            strokeWidth={1}\n            closed={false}\n          />\n          <Line\n            points={[\n              offsetX - (sleepingWidth / 2) + (10 * scaleFactor),\n              offsetY + 50,\n              offsetX - (sleepingWidth / 2) + (10 * scaleFactor),\n              offsetY + (bedTotalDepth / 2) - tsarg - (10 * scaleFactor),\n            ]}\n            stroke=\"black\"\n            strokeWidth={1}\n            closed={false}\n          />\n          <Text\n            x={offsetX - (sleepingWidth / 2) + (10 * scaleFactor) - 9}\n            y={offsetY + 50}\n            text={mattressDepth}\n            width={100}\n            align=\"center\"\n            rotation={270}\n            fontSize={18}\n          />\n        </Layer>\n      </Stage>\n    </div>\n  );\n})\n\nexport default Flow;"],"names":["Flow","forwardRef","ref","dimensions","productWidth","productDepth","mattressWidth","mattressDepth","headDepth","setHeadDepth","tsargWidth","setTsargWidth","useState","scaleFactor","setScaleFactor","stageRef","useRef","bedTotalDepth","bedTotalWidth","sleepingWidth","sleepingDepth","head","tsarg","offsetX","width","offsetY","height","useEffect","value","Math","min","useImperativeHandle","getImage","current","toDataURL","mimeType","quality","x","y","fill","stroke","strokeWidth","cornerRadius","points","closed","text","align","fontSize","rotation"],"sourceRoot":""}