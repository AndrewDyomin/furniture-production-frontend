{"version":3,"file":"static/js/779.d2ff596a.chunk.js","mappings":"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","sources":["components/OurProducts/Konvas/Smart.js"],"sourcesContent":["import { useState, useEffect, forwardRef, useImperativeHandle, useRef } from 'react';\nimport { Stage, Layer, Rect, Line, Text } from 'react-konva';\n\nconst Smart = forwardRef(({\n  dimensions,\n  productWidth,\n  productDepth,\n  angleDirection,\n}, ref) => {\n  const [scaleFactor, setScaleFactor] = useState(1);\n  const stageRef = useRef(null);\n  const sofaTotalDepth = productDepth * scaleFactor;\n  const sofaTotalWidth = productWidth * scaleFactor;\n\n  const sleepingWidth = sofaTotalWidth - 15;\n  const sleepingDepth = sofaTotalDepth - 15;\n\n  const cornerBack = 15 * scaleFactor;\n  const cornerSeatWidth = sleepingWidth / 3;\n  const cornerSeatDepth = sofaTotalDepth - 15 * scaleFactor;\n\n  const linearSeatWidth = (sleepingWidth / 3) * 2;\n  const linearSeatDepth = 70 * scaleFactor;\n\n  const offsetX =\n    dimensions.width / 2 + (cornerSeatWidth + cornerBack) - sleepingWidth / 2;\n  const offsetY = dimensions.height / 2 - sleepingDepth / 2;\n\n  useEffect(() => {\n    const value = Math.min(\n      (0.7 * dimensions.width) / productWidth,\n      (0.7 * dimensions.height) / productDepth\n    );\n    if (value > 0) {\n      setScaleFactor(value);\n    }\n  }, [dimensions, productWidth, productDepth]);\n\n  useImperativeHandle(ref, () => ({\n    getImage() {\n      return stageRef.current.toDataURL({ mimeType: 'image/jpeg', quality: 1 });\n    }\n  }));\n\n  return (\n    <div>\n      <Stage ref={stageRef} width={dimensions.width} height={dimensions.height}>\n        <Layer>\n        <Rect\n            x={0}\n            y={0}\n            width={dimensions.width}\n            height={dimensions.height}\n            fill={'#FFF'}\n          />\n        </Layer>\n        {angleDirection.value === '7' && (\n          <Layer>\n            <Line\n              points={[\n                offsetX,\n                offsetY,\n                offsetX,\n                offsetY - cornerBack,\n                offsetX - (cornerBack + cornerSeatWidth),\n                offsetY - cornerBack,\n                offsetX - (cornerBack + cornerSeatWidth),\n                offsetY + cornerSeatDepth,\n                offsetX - cornerSeatWidth,\n                offsetY + cornerSeatDepth,\n                offsetX - cornerSeatWidth,\n                offsetY,\n              ]}\n              stroke=\"black\"\n              strokeWidth={1}\n              closed={true}\n            />\n            <Rect\n              x={offsetX - cornerSeatWidth}\n              y={offsetY}\n              width={cornerSeatWidth}\n              height={cornerSeatDepth}\n              stroke=\"black\"\n              strokeWidth={1}\n              cornerRadius={3}\n            />\n            <Rect\n              x={offsetX}\n              y={offsetY}\n              width={linearSeatWidth}\n              height={linearSeatDepth}\n              stroke=\"black\"\n              strokeWidth={1}\n              cornerRadius={3}\n            />\n            <Rect\n              x={offsetX}\n              y={offsetY - cornerBack}\n              width={linearSeatWidth}\n              height={cornerBack}\n              stroke=\"black\"\n              strokeWidth={1}\n            />\n          </Layer>\n        )}\n        {angleDirection.value !== '7' && (\n          <Layer>\n            <Line\n              points={[\n                offsetX + (cornerSeatWidth - cornerBack),\n                offsetY,\n                offsetX + (cornerSeatWidth - cornerBack),\n                offsetY - cornerBack,\n                2 * offsetX +\n                  (cornerSeatWidth - cornerBack) -\n                  (offsetX - (cornerBack + cornerSeatWidth)),\n                offsetY - cornerBack,\n                2 * offsetX +\n                  (cornerSeatWidth - cornerBack) -\n                  (offsetX - (cornerBack + cornerSeatWidth)),\n                offsetY + cornerSeatDepth,\n                2 * offsetX +\n                  (cornerSeatWidth - cornerBack) -\n                  (offsetX - cornerSeatWidth),\n                offsetY + cornerSeatDepth,\n                2 * offsetX +\n                  (cornerSeatWidth - cornerBack) -\n                  (offsetX - cornerSeatWidth),\n                offsetY,\n              ]}\n              stroke=\"black\"\n              strokeWidth={1}\n              closed={true}\n            />\n            <Rect\n              x={offsetX + (cornerSeatWidth - cornerBack)}\n              y={offsetY}\n              width={cornerSeatWidth}\n              height={cornerSeatDepth}\n              stroke=\"black\"\n              strokeWidth={1}\n              cornerRadius={3}\n            />\n            <Rect\n              x={offsetX - (cornerSeatWidth + cornerBack)}\n              y={offsetY}\n              width={linearSeatWidth}\n              height={linearSeatDepth}\n              stroke=\"black\"\n              strokeWidth={1}\n              cornerRadius={3}\n            />\n            <Rect\n              x={offsetX - (cornerSeatWidth + cornerBack)}\n              y={offsetY - cornerBack}\n              width={linearSeatWidth}\n              height={cornerBack}\n              stroke=\"black\"\n              strokeWidth={1}\n            />\n          </Layer>\n        )}\n        <Layer>\n          <Line\n            points={[\n              offsetX + 100,\n              offsetY + (sofaTotalDepth),\n              offsetX - cornerSeatWidth - cornerBack + sofaTotalWidth,\n              offsetY + (sofaTotalDepth),\n            ]}\n            stroke=\"black\"\n            strokeWidth={1}\n            closed={false}\n          />\n          <Line\n            points={[\n              offsetX,\n              offsetY + (sofaTotalDepth),\n              offsetX - cornerSeatWidth - cornerBack,\n              offsetY + (sofaTotalDepth),\n            ]}\n            stroke=\"black\"\n            strokeWidth={1}\n            closed={false}\n          />\n          <Text\n            x={offsetX}\n            y={(offsetY + (sofaTotalDepth)) - 9}\n            text={productWidth}\n            width={100}\n            align='center'\n            fontSize={18}\n          />\n          <Line\n            points={[\n              offsetX - (sofaTotalWidth / 2),\n              offsetY - cornerBack,\n              offsetX - (sofaTotalWidth / 2),\n              offsetY - cornerBack + (sofaTotalDepth / 2) - 50,\n            ]}\n            stroke=\"black\"\n            strokeWidth={1}\n            closed={false}\n          />\n          <Line\n            points={[\n              offsetX - (sofaTotalWidth / 2),\n              offsetY - cornerBack + (sofaTotalDepth / 2) + 50,\n              offsetX - (sofaTotalWidth / 2),\n              offsetY - cornerBack + sofaTotalDepth,\n            ]}\n            stroke=\"black\"\n            strokeWidth={1}\n            closed={false}\n          />\n          <Text\n            x={(offsetX - (sofaTotalWidth / 2)) - 9}\n            y={(offsetY - cornerBack) + (sofaTotalDepth / 2) + 50}\n            text={productDepth}\n            width={100}\n            align='center'\n            rotation={270}\n            fontSize={18}\n          />\n        </Layer>\n      </Stage>\n    </div>\n  );\n})\n\nexport default Smart;"],"names":["Smart","forwardRef","ref","dimensions","productWidth","productDepth","angleDirection","useState","scaleFactor","setScaleFactor","stageRef","useRef","sofaTotalDepth","sofaTotalWidth","sleepingWidth","sleepingDepth","cornerBack","cornerSeatWidth","cornerSeatDepth","linearSeatWidth","linearSeatDepth","offsetX","width","offsetY","height","useEffect","value","Math","min","useImperativeHandle","getImage","current","toDataURL","mimeType","quality","x","y","fill","points","stroke","strokeWidth","closed","cornerRadius","text","align","fontSize","rotation"],"sourceRoot":""}