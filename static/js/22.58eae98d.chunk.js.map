{"version":3,"file":"static/js/22.58eae98d.chunk.js","mappings":"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","sources":["components/OurProducts/Konvas/Difi.js"],"sourcesContent":["import { useState, useEffect, forwardRef, useImperativeHandle, useRef } from 'react';\nimport { Stage, Layer, Rect, Line, Text } from 'react-konva';\n\n const Difi = forwardRef(({\n  dimensions,\n  productWidth,\n  productDepth,\n}, ref) => {\n  const [scaleFactor, setScaleFactor] = useState(1);\n  const stageRef = useRef(null);\n\n  const sofaTotalDepth = productDepth * scaleFactor;\n  const sofaTotalWidth = productWidth * scaleFactor;\n\n  const armrestsWidth = 15 * scaleFactor\n  const armrestsDepth = sofaTotalDepth - (2 * scaleFactor)\n\n  const offsetX = dimensions.width / 2;\n  const offsetY = dimensions.height / 2;\n\n  useEffect(() => {\n    const value = Math.min(\n      (0.7 * dimensions.width) / productWidth,\n      (0.7 * dimensions.height) / productDepth\n    );\n    if (value > 0) {\n      setScaleFactor(value);\n    }\n  }, [dimensions, productWidth, productDepth]);\n\n  useImperativeHandle(ref, () => ({\n    getImage() {\n      return stageRef.current.toDataURL({ mimeType: 'image/jpeg', quality: 1 });\n    }\n  }));\n\n  return (\n    <div>\n      <Stage ref={stageRef} width={dimensions.width} height={dimensions.height}>\n        <Layer>\n        <Rect\n            x={0}\n            y={0}\n            width={dimensions.width}\n            height={dimensions.height}\n            fill={'#FFF'}\n          />\n        </Layer>\n        <Layer>\n            {/* back */}\n          <Rect\n            x={offsetX - (sofaTotalWidth / 2) + armrestsWidth}\n            y={offsetY - (sofaTotalDepth / 2)}\n            width={sofaTotalWidth - (armrestsWidth * 2)}\n            height={29 * scaleFactor}\n            stroke=\"black\"\n            strokeWidth={1}\n            cornerRadius={3}\n          />\n          <Rect\n            x={offsetX - (sofaTotalWidth / 2) + armrestsWidth}\n            y={offsetY - (sofaTotalDepth / 2)}\n            width={sofaTotalWidth - (armrestsWidth * 2)}\n            height={15 * scaleFactor}\n            stroke=\"black\"\n            strokeWidth={1}\n            cornerRadius={3}\n          />\n          {/* seat */}\n          <Rect\n            x={offsetX - (sofaTotalWidth / 2) + armrestsWidth}\n            y={offsetY - (sofaTotalDepth / 2) + (29 * scaleFactor)}\n            width={(sofaTotalWidth - (armrestsWidth * 2)) / 2}\n            height={sofaTotalDepth - (29 * scaleFactor)}\n            stroke=\"black\"\n            strokeWidth={1}\n            cornerRadius={3}\n          />\n          <Rect\n            x={offsetX}\n            y={offsetY - (sofaTotalDepth / 2) + (29 * scaleFactor)}\n            width={(sofaTotalWidth - (armrestsWidth * 2)) / 2}\n            height={sofaTotalDepth - (29 * scaleFactor)}\n            stroke=\"black\"\n            strokeWidth={1}\n            cornerRadius={3}\n          />\n          {/* armrests */}\n          <Rect\n            x={offsetX - (sofaTotalWidth / 2)}\n            y={offsetY - (sofaTotalDepth / 2)}\n            width={armrestsWidth}\n            height={armrestsDepth}\n            stroke=\"black\"\n            strokeWidth={1}\n            cornerRadius={3}\n          />\n          <Rect\n            x={offsetX + (sofaTotalWidth / 2) - armrestsWidth}\n            y={offsetY - (sofaTotalDepth / 2)}\n            width={armrestsWidth}\n            height={armrestsDepth}\n            stroke=\"black\"\n            strokeWidth={1}\n            cornerRadius={3}\n          />\n        </Layer>\n        <Layer>\n          <Line\n            points={[\n              offsetX + 50,\n              offsetY + (sofaTotalDepth / 1.4),\n              offsetX + (sofaTotalWidth / 2),\n              offsetY + (sofaTotalDepth / 1.4),\n            ]}\n            stroke=\"black\"\n            strokeWidth={1}\n            closed={false}\n          />\n          <Line\n            points={[\n              offsetX - 50,\n              offsetY + (sofaTotalDepth / 1.4),\n              offsetX - (sofaTotalWidth / 2),\n              offsetY + (sofaTotalDepth / 1.4),\n            ]}\n            stroke=\"black\"\n            strokeWidth={1}\n            closed={false}\n          />\n          <Text\n            x={offsetX - 50}\n            y={offsetY + (sofaTotalDepth / 1.4) - 9}\n            text={productWidth}\n            width={100}\n            align=\"center\"\n            fontSize={18}\n          />\n          <Line\n            points={[\n              offsetX - (sofaTotalWidth / 1.7),\n              offsetY - (sofaTotalDepth / 2),\n              offsetX - (sofaTotalWidth / 1.7),\n              offsetY - 50,\n            ]}\n            stroke=\"black\"\n            strokeWidth={1}\n            closed={false}\n          />\n          <Line\n            points={[\n              offsetX - (sofaTotalWidth / 1.7),\n              offsetY + 50,\n              offsetX - (sofaTotalWidth / 1.7),\n              offsetY + (sofaTotalDepth / 2),\n            ]}\n            stroke=\"black\"\n            strokeWidth={1}\n            closed={false}\n          />\n          <Text\n            x={offsetX - (sofaTotalWidth / 1.7) - 9}\n            y={offsetY + 50}\n            text={productDepth}\n            width={100}\n            align=\"center\"\n            rotation={270}\n            fontSize={18}\n          />\n        </Layer>\n      </Stage>\n    </div>\n  );\n})\n\nexport default Difi;\n"],"names":["Difi","forwardRef","ref","dimensions","productWidth","productDepth","useState","scaleFactor","setScaleFactor","stageRef","useRef","sofaTotalDepth","sofaTotalWidth","armrestsWidth","armrestsDepth","offsetX","width","offsetY","height","useEffect","value","Math","min","useImperativeHandle","getImage","current","toDataURL","mimeType","quality","x","y","fill","stroke","strokeWidth","cornerRadius","points","closed","text","align","fontSize","rotation"],"sourceRoot":""}