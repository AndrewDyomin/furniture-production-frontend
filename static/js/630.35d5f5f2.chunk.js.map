{"version":3,"file":"static/js/630.35d5f5f2.chunk.js","mappings":"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","sources":["components/OurProducts/Konvas/Marsel.js"],"sourcesContent":["import { useState, useEffect, forwardRef, useImperativeHandle, useRef } from 'react';\nimport { Stage, Layer, Rect, Line, Text } from 'react-konva';\n\nconst Marsel = forwardRef(({\n  dimensions,\n  productWidth,\n  productDepth,\n  angleDirection,\n}, ref) => {\n  const [scaleFactor, setScaleFactor] = useState(1);\n  const stageRef = useRef(null);\n\n  const sofaTotalDepth = productDepth * scaleFactor;\n  const sofaTotalWidth = productWidth * scaleFactor;\n\n  const armrestsWidth = 20 * scaleFactor;\n  const sleepingWidth = sofaTotalWidth - armrestsWidth * 2;\n  const sleepingDepth = sofaTotalDepth - 15;\n\n  const cornerBack = 15 * scaleFactor;\n  const cornerSeatWidth = sleepingWidth / 3;\n\n  const linearSeatWidth = (sleepingWidth / 3) * 2;\n  const linearSeatDepth = 80 * scaleFactor;\n\n  const offsetX =\n    dimensions.width / 2 + (cornerSeatWidth + cornerBack) - sleepingWidth / 2;\n  const offsetY = dimensions.height / 2 - sleepingDepth / 2;\n\n  useEffect(() => {\n    const value = Math.min(\n      (0.7 * dimensions.width) / productWidth,\n      (0.7 * dimensions.height) / productDepth\n    );\n    if (value > 0) {\n      setScaleFactor(value);\n    }\n  }, [dimensions, productWidth, productDepth]);\n\n  useImperativeHandle(ref, () => ({\n    getImage() {\n      return stageRef.current.toDataURL({ mimeType: 'image/jpeg', quality: 1 });\n    }\n  }));\n\n  return (\n    <div>\n      <Stage ref={stageRef} width={dimensions.width} height={dimensions.height}>\n        <Layer>\n        <Rect\n            x={0}\n            y={0}\n            width={dimensions.width}\n            height={dimensions.height}\n            fill={'#FFF'}\n          />\n        </Layer>\n        {angleDirection.value === '7' && (\n          <Layer>\n            <Rect\n              x={offsetX - cornerSeatWidth - armrestsWidth}\n              y={offsetY - cornerBack}\n              width={armrestsWidth}\n              height={linearSeatDepth + cornerBack}\n              stroke=\"black\"\n              strokeWidth={1}\n              cornerRadius={3}\n            />\n            <Rect\n              x={offsetX - cornerSeatWidth}\n              y={offsetY - cornerBack}\n              width={cornerSeatWidth}\n              height={cornerBack}\n              stroke=\"black\"\n              strokeWidth={1}\n              cornerRadius={3}\n            />\n            <Line\n              points={[\n                offsetX,\n                offsetY,\n                offsetX - cornerSeatWidth,\n                offsetY,\n                offsetX - cornerSeatWidth,\n                offsetY + linearSeatDepth,\n                offsetX - cornerSeatWidth - armrestsWidth + (2 * scaleFactor),\n                offsetY + linearSeatDepth,\n                offsetX - cornerSeatWidth - armrestsWidth + (0.5 * scaleFactor),\n                offsetY + linearSeatDepth + (0.5 * scaleFactor),\n                offsetX - cornerSeatWidth - armrestsWidth,\n                offsetY + linearSeatDepth + (2 * scaleFactor),\n                offsetX - cornerSeatWidth - armrestsWidth,\n                offsetY + linearSeatDepth + (sofaTotalDepth - (linearSeatDepth + cornerBack)) - (2 * scaleFactor),\n                offsetX - cornerSeatWidth - armrestsWidth + (0.5 * scaleFactor),\n                offsetY + linearSeatDepth + (sofaTotalDepth - (linearSeatDepth + cornerBack)) - (0.5 * scaleFactor),\n                offsetX - cornerSeatWidth - armrestsWidth + (2 * scaleFactor),\n                offsetY + linearSeatDepth + (sofaTotalDepth - (linearSeatDepth + cornerBack)),\n                offsetX + 3 * scaleFactor - (2 * scaleFactor),\n                offsetY + linearSeatDepth + (sofaTotalDepth - (linearSeatDepth + cornerBack)),\n                offsetX + 3 * scaleFactor - (0.5 * scaleFactor),\n                offsetY + linearSeatDepth + (sofaTotalDepth - (linearSeatDepth + cornerBack)) - (0.5 * scaleFactor),\n                offsetX + 3 * scaleFactor,\n                offsetY + linearSeatDepth + (sofaTotalDepth - (linearSeatDepth + cornerBack)) - (2 * scaleFactor),\n                offsetX + 3 * scaleFactor,\n                offsetY + linearSeatDepth + (2 * scaleFactor),\n                offsetX + 3 * scaleFactor - (0.5 * scaleFactor),\n                offsetY + linearSeatDepth + (0.5 * scaleFactor),\n                offsetX + 3 * scaleFactor - (2 * scaleFactor),\n                offsetY + linearSeatDepth,\n\n                offsetX,\n                offsetY + linearSeatDepth,\n              ]}\n              stroke=\"black\"\n              strokeWidth={1}\n              closed={true}\n            />\n            <Rect\n              x={offsetX}\n              y={offsetY}\n              width={linearSeatWidth / 2}\n              height={linearSeatDepth}\n              stroke=\"black\"\n              strokeWidth={1}\n              cornerRadius={3}\n            />\n            <Rect\n              x={offsetX + linearSeatWidth / 2}\n              y={offsetY}\n              width={linearSeatWidth / 2}\n              height={linearSeatDepth}\n              stroke=\"black\"\n              strokeWidth={1}\n              cornerRadius={3}\n            />\n            <Rect\n              x={offsetX}\n              y={offsetY - cornerBack}\n              width={linearSeatWidth}\n              height={cornerBack}\n              stroke=\"black\"\n              strokeWidth={1}\n            />\n            <Rect\n              x={offsetX + linearSeatWidth}\n              y={offsetY - cornerBack}\n              width={armrestsWidth}\n              height={linearSeatDepth + cornerBack}\n              stroke=\"black\"\n              strokeWidth={1}\n              cornerRadius={3}\n            />\n          </Layer>\n        )}\n        {angleDirection.value !== '7' && (\n          <Layer>\n            <Rect\n              x={offsetX - cornerSeatWidth - armrestsWidth}\n              y={offsetY - cornerBack}\n              width={armrestsWidth}\n              height={linearSeatDepth + cornerBack}\n              stroke=\"black\"\n              strokeWidth={1}\n              cornerRadius={3}\n            />\n            <Rect\n              x={offsetX + (linearSeatWidth - cornerSeatWidth)}\n              y={offsetY - cornerBack}\n              width={cornerSeatWidth}\n              height={cornerBack}\n              stroke=\"black\"\n              strokeWidth={1}\n              cornerRadius={3}\n            />\n            <Line\n              points={[\n                offsetX + (linearSeatWidth - cornerSeatWidth),\n                offsetY,\n                offsetX + linearSeatWidth,\n                offsetY,\n                offsetX + linearSeatWidth,\n                offsetY + linearSeatDepth,\n                offsetX + linearSeatWidth + armrestsWidth - 2 * scaleFactor,\n                offsetY + linearSeatDepth,\n                offsetX + linearSeatWidth + armrestsWidth - 0.5 * scaleFactor,\n                offsetY + linearSeatDepth + 0.5 * scaleFactor,\n                offsetX + linearSeatWidth + armrestsWidth,\n                offsetY + linearSeatDepth + 2 * scaleFactor,\n                offsetX + linearSeatWidth + armrestsWidth,\n                offsetY + (sofaTotalDepth - cornerBack) - 2 * scaleFactor,\n                offsetX + linearSeatWidth + armrestsWidth - 0.5 * scaleFactor,\n                offsetY + (sofaTotalDepth - cornerBack) - 0.5 * scaleFactor,\n                offsetX + linearSeatWidth + armrestsWidth - 2 * scaleFactor,\n                offsetY + (sofaTotalDepth - cornerBack),\n                offsetX +\n                  linearSeatWidth -\n                  cornerSeatWidth -\n                  3 * scaleFactor +\n                  2 * scaleFactor,\n                offsetY + (sofaTotalDepth - cornerBack),\n                offsetX +\n                  linearSeatWidth -\n                  cornerSeatWidth -\n                  3 * scaleFactor +\n                  0.5 * scaleFactor,\n                offsetY + (sofaTotalDepth - cornerBack) - 0.5 * scaleFactor,\n                offsetX + linearSeatWidth - cornerSeatWidth - 3 * scaleFactor,\n                offsetY + (sofaTotalDepth - cornerBack) - 2 * scaleFactor,\n                offsetX + linearSeatWidth - cornerSeatWidth - 3 * scaleFactor,\n                offsetY + linearSeatDepth + 2 * scaleFactor,\n                offsetX +\n                  linearSeatWidth -\n                  cornerSeatWidth -\n                  3 * scaleFactor +\n                  0.5 * scaleFactor,\n                offsetY + linearSeatDepth + 0.5 * scaleFactor,\n                offsetX +\n                  linearSeatWidth -\n                  cornerSeatWidth -\n                  3 * scaleFactor +\n                  2 * scaleFactor,\n                offsetY + linearSeatDepth,\n                offsetX + linearSeatWidth - cornerSeatWidth,\n                offsetY + linearSeatDepth,\n              ]}\n              stroke=\"black\"\n              strokeWidth={1}\n              closed={true}\n            />\n            <Rect\n              x={offsetX - cornerSeatWidth}\n              y={offsetY}\n              width={linearSeatWidth / 2}\n              height={linearSeatDepth}\n              stroke=\"black\"\n              strokeWidth={1}\n              cornerRadius={3}\n            />\n            <Rect\n              x={offsetX + linearSeatWidth / 2 - cornerSeatWidth}\n              y={offsetY}\n              width={linearSeatWidth / 2}\n              height={linearSeatDepth}\n              stroke=\"black\"\n              strokeWidth={1}\n              cornerRadius={3}\n            />\n            <Rect\n              x={offsetX - cornerSeatWidth}\n              y={offsetY - cornerBack}\n              width={linearSeatWidth}\n              height={cornerBack}\n              stroke=\"black\"\n              strokeWidth={1}\n            />\n            <Rect\n              x={offsetX + linearSeatWidth}\n              y={offsetY - cornerBack}\n              width={armrestsWidth}\n              height={linearSeatDepth + cornerBack}\n              stroke=\"black\"\n              strokeWidth={1}\n              cornerRadius={3}\n            />\n          </Layer>\n        )}\n        <Layer>\n          <Line\n            points={[\n              offsetX + 100,\n              offsetY + sofaTotalDepth,\n              offsetX + linearSeatWidth + armrestsWidth,\n              offsetY + sofaTotalDepth,\n            ]}\n            stroke=\"black\"\n            strokeWidth={1}\n            closed={false}\n          />\n          <Line\n            points={[\n              offsetX,\n              offsetY + sofaTotalDepth,\n              offsetX - cornerSeatWidth - armrestsWidth,\n              offsetY + sofaTotalDepth,\n            ]}\n            stroke=\"black\"\n            strokeWidth={1}\n            closed={false}\n          />\n          <Text\n            x={offsetX}\n            y={offsetY + sofaTotalDepth - 9}\n            text={productWidth}\n            width={100}\n            align=\"center\"\n            fontSize={18}\n          />\n          <Line\n            points={[\n              offsetX - sofaTotalWidth / 2,\n              offsetY + ((sofaTotalDepth - cornerBack) / 2) - 50,\n              offsetX - sofaTotalWidth / 2,\n              offsetY - cornerBack,\n            ]}\n            stroke=\"black\"\n            strokeWidth={1}\n            closed={false}\n          />\n          <Line\n            points={[\n              offsetX - sofaTotalWidth / 2,\n              offsetY + (sofaTotalDepth - cornerBack),\n              offsetX - sofaTotalWidth / 2,\n              offsetY + ((sofaTotalDepth - cornerBack) / 2) + 50,\n            ]}\n            stroke=\"black\"\n            strokeWidth={1}\n            closed={false}\n          />\n          <Text\n            x={offsetX - sofaTotalWidth / 2 - 9}\n            y={offsetY + ((sofaTotalDepth - cornerBack) / 2) + 50}\n            text={productDepth}\n            width={100}\n            align=\"center\"\n            rotation={270}\n            fontSize={18}\n          />\n        </Layer>\n      </Stage>\n    </div>\n  );\n})\n\nexport default Marsel;"],"names":["Marsel","forwardRef","ref","dimensions","productWidth","productDepth","angleDirection","useState","scaleFactor","setScaleFactor","stageRef","useRef","sofaTotalDepth","sofaTotalWidth","armrestsWidth","sleepingWidth","sleepingDepth","cornerBack","cornerSeatWidth","linearSeatWidth","linearSeatDepth","offsetX","width","offsetY","height","useEffect","value","Math","min","useImperativeHandle","getImage","current","toDataURL","mimeType","quality","x","y","fill","stroke","strokeWidth","cornerRadius","points","closed","text","align","fontSize","rotation"],"sourceRoot":""}