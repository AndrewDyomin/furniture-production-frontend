{"version":3,"file":"static/js/684.f30d8835.chunk.js","mappings":"4OAAaA,EAAkB,SAAAC,GAAK,OAAIA,EAAMC,OAAOC,KAAjB,EACvBC,EAAgB,SAAAH,GAAK,OAAIA,EAAMC,OAAOG,OAAjB,ECAlC,EAA0B,uBAA1B,EAA0D,sBAA1D,EAA8F,2B,SCEjFC,EAAQ,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,KAAMC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,gBAE5C,OACE,iBAAKC,UAAWC,EAAhB,WACE,cAAGD,UAAWC,EAAd,SAA2BJ,KAC3B,iBAAKG,UAAWC,EAAhB,WACE,uBAAIL,KACJ,uBAAIM,KAAKC,MAAMJ,MACf,uBAAID,SAIX,ECdD,GAAgB,KAAO,yBAAyB,KAAO,0BCK1CM,EAAa,WACxB,IAAMb,GAASc,EAAAA,EAAAA,IAAYhB,GAI3B,OAFAiB,QAAQC,IAAIhB,EAAOiB,iBAGjB,gBAAKR,UAAWC,EAAAA,UAAhB,SACuB,IAAlBV,EAAOkB,QACJ,eAAIT,UAAWC,EAAAA,KAAf,SACKV,EAAOiB,eAAeE,KAAI,gBAAGd,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAQC,EAAjB,EAAiBA,OAAQC,EAAzB,EAAyBA,gBAAzB,OAC3B,eAAmBC,UAAWC,EAAAA,KAA9B,UACA,SAACN,EAAD,CACCC,KAAMA,EACNC,OAAQA,EACRC,OAAQA,EACRC,gBAAiBA,KCFrB,WAGX,IAH0B,IAAdY,EAAc,uDAAP,GACfC,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWL,IAC3CA,KAAQ,CACb,IAAIM,EAAqB,GAAdJ,EAAMF,GAEfC,GADEK,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAOL,CACR,CDnBwBQ,GADkB,OAU/B,iDAIX,EEtBc,SAASC,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAYnB,EAAAA,EAAAA,IAAYZ,GAM9B,OAJAgC,EAAAA,EAAAA,YAAU,WACRH,GAASI,EAAAA,EAAAA,KACV,GAAE,CAACJ,KAGF,+BACA,UAAC,KAAD,YACI,SAAC,KAAD,WACI,8CAEJ,yBAAME,GAAa,4BACnB,SAACpB,EAAD,QAKP,C","sources":["redux/orders/selectors.js","webpack://furniture-production-frontend/./src/components/Order/Order.module.css?cfb9","components/Order/Order.js","webpack://furniture-production-frontend/./src/components/OrdersList/OrdersList.module.css?97e3","components/OrdersList/OrdersList.js","../node_modules/nanoid/index.browser.js","pages/Orders.js"],"sourcesContent":["export const selectAllOrders = state => state.orders.items;\nexport const selectLoading = state => state.orders.loading;","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Order_wrapper__hSe-H\",\"number\":\"Order_number__YkUyJ\",\"discription\":\"Order_discription__O8Cz6\"};","// import { useDispatch } from 'react-redux';\nimport css from './Order.module.css';\n\nexport const Order = ({ name, number, dealer, plannedDeadline }) => {\n\n  return (\n    <div className={css.wrapper}>\n      <p className={css.number}>{number}</p>\n      <div className={css.discription}>\n        <p>{name}</p>\n        <p>{Date.parse(plannedDeadline)}</p>\n        <p>{dealer}</p>\n      </div>\n    </div>\n  );\n};","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"OrdersList_list__QGi1g\",\"item\":\"OrdersList_item__AQirm\"};","import { useSelector } from 'react-redux';\nimport { Order } from '../Order/Order';\nimport { selectAllOrders } from '../../redux/orders/selectors';\nimport css from './OrdersList.module.css';\nimport { nanoid } from 'nanoid'\n\nexport const OrdersList = () => {\n  const orders = useSelector(selectAllOrders);\n\n  console.log(orders.allOrdersArray)\n\n  return (\n    <div className={css.container}>\n        {orders.length !== 0 ? \n            <ul className={css.list}>\n                {orders.allOrdersArray.map(({ name, number, dealer, plannedDeadline }) => (\n                <li key={nanoid()} className={css.item}>\n                <Order  \n                 name={name}\n                 number={number}\n                 dealer={dealer}\n                 plannedDeadline={plannedDeadline} />\n                </li>\n            ))}\n            </ul> : \n            <p>Orders is not loaded</p>\n        }\n    </div >\n  );\n};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { fetchAllOrders } from '../redux/orders/operations';\nimport { selectLoading } from '../redux/orders/selectors';\nimport { OrdersList } from '../components/OrdersList/OrdersList';\n\nexport default function Orders() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchAllOrders());\n  }, [dispatch]);\n\n  return (\n    <>\n    <HelmetProvider>\n        <Helmet>\n            <title>Your orders</title>\n        </Helmet>\n        <div>{isLoading && 'Request in progress...'}</div>\n        <OrdersList />\n    </HelmetProvider>\n\n    </>\n  );\n}"],"names":["selectAllOrders","state","orders","items","selectLoading","loading","Order","name","number","dealer","plannedDeadline","className","css","Date","parse","OrdersList","useSelector","console","log","allOrdersArray","length","map","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","nanoid","Orders","dispatch","useDispatch","isLoading","useEffect","fetchAllOrders"],"sourceRoot":""}