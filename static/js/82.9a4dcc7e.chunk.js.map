{"version":3,"file":"static/js/82.9a4dcc7e.chunk.js","mappings":"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","sources":["components/OurProducts/Konvas/Faynee-mini.js"],"sourcesContent":["import React, {\n  useMemo,\n  useState,\n  useEffect,\n  forwardRef,\n  useImperativeHandle,\n  useRef,\n} from 'react';\nimport { Stage, Layer, Rect, Line, Text, Group } from 'react-konva';\n\nconst FayneeMini = forwardRef(\n  (\n    { dimensions, productWidth, productDepth, activeModules, setActiveModules },\n    ref\n  ) => {\n    const [scaleFactor, setScaleFactor] = useState(1);\n\n    useEffect(() => {\n      const value = Math.min(\n        (0.7 * dimensions.width) / productWidth,\n        (0.7 * dimensions.height) / productDepth\n      );\n      if (value > 0 && value !== scaleFactor) {\n        setScaleFactor(value);\n      }\n    }, [dimensions, productWidth, productDepth, scaleFactor]);\n\n    const stageRef = useRef(null);\n\n    const sofaTotalDepth = productDepth * scaleFactor;\n    const sofaTotalWidth = productWidth * scaleFactor;\n\n    const backRadius = 8 * scaleFactor;\n\n    const offsetX = dimensions.width / 2;\n    const offsetY = dimensions.height / 2;\n\n    const isARM =\n      activeModules.some(module => module.id === 'ARML') &&\n      activeModules.some(module => module.id === 'ARMR');\n\n    useImperativeHandle(ref, () => ({\n      getImage() {\n        return stageRef.current.toDataURL({\n          mimeType: 'image/jpeg',\n          quality: 1,\n        });\n      },\n    }));\n\n    let possibleModules = useMemo(\n      () => [\n        {\n          id: 'FM01',\n          name: 'модуль',\n          position: { x: offsetX, y: offsetY },\n          height: 120,\n          width: 100,\n          mark: (position, height, width) => (\n            <>\n              <Line\n                points={[\n                  position.x,\n                  position.y + backRadius,\n                  position.x + width / 2,\n                  position.y + 3 * scaleFactor,\n                  position.x + width,\n                  position.y + backRadius,\n                ]}\n                stroke=\"black\"\n                strokeWidth={1}\n                closed={false}\n                lineJoin=\"round\"\n                tension={0.7}\n              />\n              <Rect\n                x={position.x}\n                y={position.y + backRadius}\n                width={width}\n                height={height / 6}\n                stroke=\"black\"\n                strokeWidth={1}\n                cornerRadius={2}\n              />\n              <Rect\n                x={position.x}\n                y={position.y + height / 6 + backRadius}\n                width={width}\n                height={height - (height / 6 + backRadius)}\n                stroke=\"black\"\n                strokeWidth={1}\n                cornerRadius={4}\n              />\n            </>\n          ),\n        },\n        {\n          id: 'ARML',\n          name: 'подлокотник левый',\n          position: { x: offsetX, y: offsetY },\n          height: 120,\n          width: 17.5,\n          mark: (position, height, width) => (\n            <>\n              <Line\n                points={[\n                  position.x + 2.5 * scaleFactor,\n                  position.y,\n                  position.x,\n                  position.y + height / 2,\n                  position.x + 2.5 * scaleFactor,\n                  position.y + height,\n                ]}\n                stroke=\"black\"\n                strokeWidth={1}\n                closed={false}\n                lineJoin=\"round\"\n                tension={1}\n              />\n              <Rect\n                x={position.x + 2.5 * scaleFactor}\n                y={position.y}\n                width={width - 2.5 * scaleFactor}\n                height={height}\n                stroke=\"black\"\n                strokeWidth={1}\n                cornerRadius={[0, 3, 3, 0]}\n              />\n            </>\n          ),\n        },\n        {\n          id: 'ARMR',\n          name: 'подлокотник правый',\n          position: { x: offsetX, y: offsetY },\n          height: 120,\n          width: 17.5,\n          mark: (position, height, width) => (\n            <>\n              <Line\n                points={[\n                  position.x + width - 2.5 * scaleFactor,\n                  position.y,\n                  position.x + width,\n                  position.y + height / 2,\n                  position.x + width - 2.5 * scaleFactor,\n                  position.y + height,\n                ]}\n                stroke=\"black\"\n                strokeWidth={1}\n                closed={false}\n                lineJoin=\"round\"\n                tension={1}\n              />\n              <Rect\n                x={position.x}\n                y={position.y}\n                width={width - 2.5 * scaleFactor}\n                height={height}\n                stroke=\"black\"\n                strokeWidth={1}\n                cornerRadius={[3, 0, 0, 3]}\n              />\n            </>\n          ),\n        },\n        {\n          id: 'BKPL',\n          name: 'пристенок',\n          position: { x: offsetX, y: offsetY },\n          height: 3,\n          width: 200,\n          mark: (position, height, width, arm) => {\n            if (arm) {\n              return (\n                <>\n                  <Rect\n                    x={position.x}\n                    y={position.y}\n                    width={width}\n                    height={height}\n                    stroke=\"black\"\n                    strokeWidth={1}\n                    cornerRadius={[3, 3, 0, 0]}\n                  />\n                </>\n              );\n            } else {\n              console.warn('not enough arms');\n              return <></>;\n            }\n          },\n        },\n      ],\n      [offsetX, offsetY, scaleFactor, backRadius]\n    );\n\n    const drawModules = () => {\n      let backStrap = {};\n\n      const seatModules = activeModules.filter(module => module.id === 'FM01');\n      if (seatModules.length !== 0) {\n        let acc = 0;\n        seatModules.forEach(module => {\n          acc += module.width;\n        });\n        backStrap.width = acc * scaleFactor;\n      }\n\n      return (\n        <Layer>\n          {activeModules.map((module, index) => {\n            const height = module.height * scaleFactor;\n            const width = module.width * scaleFactor;\n\n            return (\n              <Group key={index}>\n                {module.id === 'BKPL'\n                  ? module.mark(module.position, height, backStrap.width, isARM)\n                  : module.mark(module.position, height, width, isARM)}\n              </Group>\n            );\n          })}\n        </Layer>\n      );\n    };\n\n    useEffect(() => {\n      if (activeModules.length !== 0 && activeModules[0].position.x !== offsetX - sofaTotalWidth / 2) {\n        const sortedModules = activeModules\n          .map(item => possibleModules.find(module => module.id === item.id))\n          .filter(Boolean);\n        setActiveModules(sortedModules);\n      }\n    }, [activeModules, offsetX, possibleModules, setActiveModules, sofaTotalWidth])\n\n    useEffect(() => {\n      const standardArr = ['ARML', 'FM01', 'FM01', 'ARMR', 'BKPL'];\n      if (activeModules.length === 0) {\n        const sortedModules = standardArr\n          .map(id => possibleModules.find(module => module.id === id))\n          .filter(Boolean);\n        setActiveModules(sortedModules);\n      }\n\n      if (\n        activeModules.length !== 0 &&\n        activeModules[0].position.x === offsetX\n      ) {\n        let currentX = offsetX - sofaTotalWidth / 2;\n        let currentY = offsetY - sofaTotalDepth / 2;\n\n        const positionedModules = activeModules.map((module, index) => {\n          if (index !== 0) {\n            currentX += activeModules[index - 1].width * scaleFactor;\n          }\n          if (module.id === 'BKPL') {\n            currentX =\n              offsetX -\n              sofaTotalWidth / 2 +\n              activeModules[0].width * scaleFactor;\n            currentY = offsetY - sofaTotalDepth / 2;\n          }\n          const updatedPosition = { x: currentX, y: currentY };\n\n          return { ...module, position: updatedPosition };\n        });\n        setActiveModules(positionedModules);\n      }\n    }, [\n      activeModules,\n      setActiveModules,\n      scaleFactor,\n      possibleModules,\n      offsetX,\n      offsetY,\n      sofaTotalDepth,\n      sofaTotalWidth,\n    ]);\n\n    console.log(activeModules[0])\n\n    return (\n      <div>\n        <Stage\n          ref={stageRef}\n          width={dimensions.width}\n          height={dimensions.height}\n        >\n          <Layer>\n            <Rect\n              x={0}\n              y={0}\n              width={dimensions.width}\n              height={dimensions.height}\n              fill={'#FFF'}\n            />\n          </Layer>\n          {drawModules()}\n          <Layer>\n            <Line\n              points={[\n                offsetX + 50,\n                offsetY + sofaTotalDepth / 1.4,\n                offsetX + sofaTotalWidth / 2,\n                offsetY + sofaTotalDepth / 1.4,\n              ]}\n              stroke=\"black\"\n              strokeWidth={1}\n              closed={false}\n            />\n            <Line\n              points={[\n                offsetX - 50,\n                offsetY + sofaTotalDepth / 1.4,\n                offsetX - sofaTotalWidth / 2,\n                offsetY + sofaTotalDepth / 1.4,\n              ]}\n              stroke=\"black\"\n              strokeWidth={1}\n              closed={false}\n            />\n            <Text\n              x={offsetX - 50}\n              y={offsetY + sofaTotalDepth / 1.4 - 9}\n              text={productWidth}\n              width={100}\n              align=\"center\"\n              fontSize={18}\n            />\n            <Line\n              points={[\n                offsetX - sofaTotalWidth / 1.7,\n                offsetY - sofaTotalDepth / 2,\n                offsetX - sofaTotalWidth / 1.7,\n                offsetY - 50,\n              ]}\n              stroke=\"black\"\n              strokeWidth={1}\n              closed={false}\n            />\n            <Line\n              points={[\n                offsetX - sofaTotalWidth / 1.7,\n                offsetY + 50,\n                offsetX - sofaTotalWidth / 1.7,\n                offsetY + sofaTotalDepth / 2,\n              ]}\n              stroke=\"black\"\n              strokeWidth={1}\n              closed={false}\n            />\n            <Text\n              x={offsetX - sofaTotalWidth / 1.7 - 9}\n              y={offsetY + 50}\n              text={productDepth}\n              width={100}\n              align=\"center\"\n              rotation={270}\n              fontSize={18}\n            />\n          </Layer>\n        </Stage>\n      </div>\n    );\n  }\n);\n\nexport default FayneeMini;\n"],"names":["FayneeMini","forwardRef","ref","dimensions","productWidth","productDepth","activeModules","setActiveModules","useState","scaleFactor","setScaleFactor","useEffect","value","Math","min","width","height","stageRef","useRef","sofaTotalDepth","sofaTotalWidth","backRadius","offsetX","offsetY","isARM","some","module","id","useImperativeHandle","getImage","current","toDataURL","mimeType","quality","possibleModules","useMemo","name","position","x","y","mark","points","stroke","strokeWidth","closed","lineJoin","tension","cornerRadius","arm","console","warn","length","sortedModules","map","item","find","filter","Boolean","currentX","currentY","positionedModules","index","updatedPosition","log","fill","backStrap","seatModules","acc","forEach","drawModules","text","align","fontSize","rotation"],"sourceRoot":""}