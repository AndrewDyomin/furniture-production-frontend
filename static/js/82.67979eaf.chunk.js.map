{"version":3,"file":"static/js/82.67979eaf.chunk.js","mappings":"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","sources":["components/OurProducts/Konvas/Faynee-mini.js"],"sourcesContent":["import React, {\n  useMemo,\n  useState,\n  useEffect,\n  forwardRef,\n  useImperativeHandle,\n  useRef,\n} from 'react';\nimport { Stage, Layer, Rect, Line, Text, Group } from 'react-konva';\n\nconst FayneeMini = forwardRef(\n  (\n    { dimensions, productWidth, productDepth, activeModules, setActiveModules },\n    ref\n  ) => {\n    const [scaleFactor, setScaleFactor] = useState(1);\n\n    const stageRef = useRef(null);\n\n    const sofaTotalDepth = productDepth * scaleFactor;\n    const sofaTotalWidth = productWidth * scaleFactor;\n\n    const offsetX = dimensions.width / 2;\n    const offsetY = dimensions.height / 2;\n\n    const isARM = activeModules.some(module => module.id === 'ARML') && activeModules.some(module => module.id === 'ARMR');\n\n    useEffect(() => {\n      const value = Math.min(\n        (0.7 * dimensions.width) / productWidth,\n        (0.7 * dimensions.height) / productDepth\n      );\n      if (value > 0 || value !== scaleFactor) {\n        setScaleFactor(value);\n        console.log('scale:', value);\n      }\n    }, [dimensions, productWidth, productDepth, scaleFactor]);\n\n    useImperativeHandle(ref, () => ({\n      getImage() {\n        return stageRef.current.toDataURL({\n          mimeType: 'image/jpeg',\n          quality: 1,\n        });\n      },\n    }));\n\n    let possibleModules = useMemo(\n      () => [\n        {\n          id: 'FM01',\n          name: 'модуль',\n          position: { x: offsetX, y: offsetY },\n          height: 120,\n          width: 100,\n          mark: (position, height, width) => (\n            <>\n              <Line\n                points={[\n                  position.x,\n                  position.y + 8 * scaleFactor,\n                  position.x + width / 2,\n                  position.y + 3 * scaleFactor,\n                  position.x + width,\n                  position.y + 8 * scaleFactor,\n                ]}\n                stroke=\"black\"\n                strokeWidth={1}\n                closed={false}\n                lineJoin=\"round\"\n                tension={0.7}\n              />\n              <Rect\n                x={position.x}\n                y={position.y + 8 * scaleFactor}\n                width={width}\n                height={height / 6}\n                stroke=\"black\"\n                strokeWidth={1}\n                cornerRadius={2}\n              />\n              <Rect\n                x={position.x}\n                y={position.y + height / 6 + 8 * scaleFactor}\n                width={width}\n                height={height - (height / 6 + 8 * scaleFactor)}\n                stroke=\"black\"\n                strokeWidth={1}\n                cornerRadius={4}\n              />\n            </>\n          ),\n        },\n        {\n          id: 'ARML',\n          name: 'подлокотник левый',\n          position: { x: offsetX, y: offsetY },\n          height: 120,\n          width: 17.5,\n          mark: (position, height, width) => (\n            <>\n              <Line\n                points={[\n                  position.x + 2.5 * scaleFactor,\n                  position.y,\n                  position.x,\n                  position.y + height / 2,\n                  position.x + 2.5 * scaleFactor,\n                  position.y + height,\n                ]}\n                stroke=\"black\"\n                strokeWidth={1}\n                closed={false}\n                lineJoin=\"round\"\n                tension={1}\n              />\n              <Rect\n                x={position.x + 2.5 * scaleFactor}\n                y={position.y}\n                width={width - 2.5 * scaleFactor}\n                height={height}\n                stroke=\"black\"\n                strokeWidth={1}\n                cornerRadius={[0, 3, 3, 0]}\n              />\n            </>\n          ),\n        },\n        {\n          id: 'ARMR',\n          name: 'подлокотник правый',\n          position: { x: offsetX, y: offsetY },\n          height: 120,\n          width: 17.5,\n          mark: (position, height, width) => (\n            <>\n              <Line\n                points={[\n                  position.x + width - 2.5 * scaleFactor,\n                  position.y,\n                  position.x + width,\n                  position.y + height / 2,\n                  position.x + width - 2.5 * scaleFactor,\n                  position.y + height,\n                ]}\n                stroke=\"black\"\n                strokeWidth={1}\n                closed={false}\n                lineJoin=\"round\"\n                tension={1}\n              />\n              <Rect\n                x={position.x}\n                y={position.y}\n                width={width - 2.5 * scaleFactor}\n                height={height}\n                stroke=\"black\"\n                strokeWidth={1}\n                cornerRadius={[3, 0, 0, 3]}\n              />\n            </>\n          ),\n        },\n        {\n          id: 'BKPL',\n          name: 'пристенок',\n          position: { x: offsetX, y: offsetY },\n          height: 3,\n          width: 200,\n          mark: (position, height, width, arm) => {\n            if (arm) {\n              return (\n                <>\n                  <Rect\n                    x={activeModules[0] ? offsetX - sofaTotalWidth / 2 + activeModules[0].width * scaleFactor\n                        : 0\n                    }\n                    y={position.y}\n                    width={\n                      activeModules[0]\n                        ? sofaTotalWidth -\n                          activeModules[0].width * scaleFactor +\n                          activeModules[activeModules.length - 2].width *\n                            scaleFactor\n                        : 0\n                    }\n                    height={3 * scaleFactor}\n                    stroke=\"black\"\n                    strokeWidth={1}\n                    cornerRadius={[3, 3, 0, 0]}\n                  />\n                </>\n              );\n            } else {\n              console.log('not enough arms');\n              return <></>;\n            }\n          },\n        },\n      ],\n      [offsetX, offsetY, scaleFactor, activeModules, sofaTotalWidth]\n    );\n\n    const drawModules = () => {\n      let currentX = offsetX - sofaTotalWidth / 2;\n      let currentY = offsetY - sofaTotalDepth / 2;\n      let positions = [];\n      let backStrap = {}\n\n      // const seatModules = activeModules.filter(module => module.id === 'FM01')\n      // console.log(seatModules)\n      backStrap.position = {x: offsetX - (sofaTotalWidth / 2), y: offsetY - (sofaTotalDepth / 2)}\n\n      return (\n        <Layer>\n          {activeModules.map((module, index) => {\n            \n            const updatedPosition = {\n              x: currentX,\n              y: currentY,\n            };\n\n            positions.push(updatedPosition);\n\n            const height = module.height * scaleFactor;\n            const width = module.width * scaleFactor;\n\n            currentX += module.width * scaleFactor;\n            currentY += 0;\n\n            return (\n              <Group key={index}>\n                {module.id === 'BKPL' ? \n                  module.mark(\n                    backStrap.position, \n                    height, \n                    width, \n                    isARM)\n                : module.mark(updatedPosition, height, width, isARM)}\n              </Group>\n            );\n          })}\n        </Layer>\n      );\n    };\n\n    useEffect(() => {\n      const standardArr = ['ARML', 'FM01', 'FM01', 'ARMR', 'BKPL'];\n      let currentX =  - sofaTotalWidth / 2;\n      let currentY = offsetY - sofaTotalDepth / 2;\n\n      if (activeModules.length === 0) {\n        const sortedModules = standardArr\n          .map(id => possibleModules.find(module => module.id === id))\n          .filter(Boolean);\n        setActiveModules(sortedModules);\n      } else if (activeModules[0].position.x === offsetX) {\n        \n\n        const updatedPosition = { x: currentX, y: currentY};\n        const positionedModules = activeModules.map(module => {\n\n          currentX += module.width * scaleFactor;\n          currentY += 0;\n          \n          return { ...module, position: updatedPosition }\n        })\n        console.log(positionedModules)\n        setActiveModules(positionedModules);\n      }\n      console.log(activeModules);\n      activeModules.length !== 0 && console.log('1', activeModules[0].position.x, '2', currentX)\n    }, [activeModules, setActiveModules, scaleFactor, possibleModules, offsetX, offsetY, sofaTotalDepth, sofaTotalWidth]);\n\n    return (\n      <div>\n        <Stage\n          ref={stageRef}\n          width={dimensions.width}\n          height={dimensions.height}\n        >\n          <Layer>\n            <Rect\n              x={0}\n              y={0}\n              width={dimensions.width}\n              height={dimensions.height}\n              fill={'#FFF'}\n            />\n          </Layer>\n          {drawModules()}\n          <Layer>\n            <Line\n              points={[\n                offsetX + 50,\n                offsetY + sofaTotalDepth / 1.4,\n                offsetX + sofaTotalWidth / 2,\n                offsetY + sofaTotalDepth / 1.4,\n              ]}\n              stroke=\"black\"\n              strokeWidth={1}\n              closed={false}\n            />\n            <Line\n              points={[\n                offsetX - 50,\n                offsetY + sofaTotalDepth / 1.4,\n                offsetX - sofaTotalWidth / 2,\n                offsetY + sofaTotalDepth / 1.4,\n              ]}\n              stroke=\"black\"\n              strokeWidth={1}\n              closed={false}\n            />\n            <Text\n              x={offsetX - 50}\n              y={offsetY + sofaTotalDepth / 1.4 - 9}\n              text={productWidth}\n              width={100}\n              align=\"center\"\n              fontSize={18}\n            />\n            <Line\n              points={[\n                offsetX - sofaTotalWidth / 1.7,\n                offsetY - sofaTotalDepth / 2,\n                offsetX - sofaTotalWidth / 1.7,\n                offsetY - 50,\n              ]}\n              stroke=\"black\"\n              strokeWidth={1}\n              closed={false}\n            />\n            <Line\n              points={[\n                offsetX - sofaTotalWidth / 1.7,\n                offsetY + 50,\n                offsetX - sofaTotalWidth / 1.7,\n                offsetY + sofaTotalDepth / 2,\n              ]}\n              stroke=\"black\"\n              strokeWidth={1}\n              closed={false}\n            />\n            <Text\n              x={offsetX - sofaTotalWidth / 1.7 - 9}\n              y={offsetY + 50}\n              text={productDepth}\n              width={100}\n              align=\"center\"\n              rotation={270}\n              fontSize={18}\n            />\n          </Layer>\n        </Stage>\n      </div>\n    );\n  }\n);\n\nexport default FayneeMini;\n"],"names":["FayneeMini","forwardRef","ref","dimensions","productWidth","productDepth","activeModules","setActiveModules","useState","scaleFactor","setScaleFactor","stageRef","useRef","sofaTotalDepth","sofaTotalWidth","offsetX","width","offsetY","height","isARM","some","module","id","useEffect","value","Math","min","console","log","useImperativeHandle","getImage","current","toDataURL","mimeType","quality","possibleModules","useMemo","name","position","x","y","mark","points","stroke","strokeWidth","closed","lineJoin","tension","cornerRadius","arm","length","currentX","currentY","sortedModules","map","find","filter","Boolean","updatedPosition","positionedModules","fill","positions","backStrap","index","push","drawModules","text","align","fontSize","rotation"],"sourceRoot":""}