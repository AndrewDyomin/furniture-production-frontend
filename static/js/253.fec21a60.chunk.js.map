{"version":3,"file":"static/js/253.fec21a60.chunk.js","mappings":"qMAGMA,GAAOC,EAAAA,EAAAA,aAAW,WAIrBC,GAAS,IAHVC,EAGS,EAHTA,WACAC,EAES,EAFTA,aACAC,EACS,EADTA,aAEA,GAAsCC,EAAAA,EAAAA,UAAS,GAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACMC,GAAWC,EAAAA,EAAAA,QAAO,MAElBC,EAAiBN,EAAeE,EAChCK,EAAiBR,EAAeG,EAEhCM,EAAUV,EAAWW,MAAQ,EAC7BC,EAAUZ,EAAWa,OAAS,EAkBpC,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAQC,KAAKC,IAChB,GAAMjB,EAAWW,MAASV,EAC1B,GAAMD,EAAWa,OAAUX,GAE1Ba,EAAQ,GACVV,EAAeU,EAElB,GAAE,CAACf,EAAYC,EAAcC,KAE9BgB,EAAAA,EAAAA,qBAAoBnB,GAAK,iBAAO,CAC9BoB,SAD8B,WAE5B,OAAOb,EAASc,QAAQC,UAAU,CAAEC,SAAU,aAAcC,QAAS,GACtE,EAHsB,KAOvB,0BACE,UAAC,KAAD,CAAOxB,IAAKO,EAAUK,MAAOX,EAAWW,MAAOE,OAAQb,EAAWa,OAAlE,WACA,SAAC,KAAD,WACE,SAAC,KAAD,CACIW,EAAG,EACHC,EAAG,EACHd,MAAOX,EAAWW,MAClBE,OAAQb,EAAWa,OACnBa,KAAM,YAGV,UAAC,KAAD,YACE,SAAC,KAAD,CACEF,EAAGd,EAAWD,EAAiB,EAC/BgB,EAAGb,EAAWJ,EAAiB,EAC/BG,MAAOF,EACPI,OAAQ,GAAKT,EACbuB,OAAO,QACPC,YAAa,EACbC,aAAc,KAEhB,SAAC,KAAD,CACEL,EAAGd,EAAWD,EAAiB,EAC/BgB,EAAGb,EAAWJ,EAAiB,EAAM,GAAKJ,EAC1CO,MAAOF,EACPI,OAAQL,EAAkB,GAAKJ,EAC/BuB,OAAO,QACPC,YAAa,EACbC,aAAc,QAGlB,UAAC,KAAD,YACE,SAAC,KAAD,CACEC,OAAQ,CACNpB,EAAU,GACVE,EAAWJ,EAAiB,IAC5BE,EAAWD,EAAiB,EAC5BG,EAAWJ,EAAiB,KAE9BmB,OAAO,QACPC,YAAa,EACbG,QAAQ,KAEV,SAAC,KAAD,CACED,OAAQ,CACNpB,EAAU,GACVE,EAAWJ,EAAiB,IAC5BE,EAAWD,EAAiB,EAC5BG,EAAWJ,EAAiB,KAE9BmB,OAAO,QACPC,YAAa,EACbG,QAAQ,KAEV,SAAC,KAAD,CACEP,EAAGd,EAAU,GACbe,EAAGb,EAAWJ,EAAiB,IAAO,EACtCwB,KAAM/B,EACNU,MAAO,IACPsB,MAAM,SACNC,SAAU,MAEZ,SAAC,KAAD,CACEJ,OAAQ,CACNpB,EAAWD,EAAiB,IAC5BG,EAAWJ,EAAiB,EAC5BE,EAAWD,EAAiB,IAC5BG,EAAU,IAEZe,OAAO,QACPC,YAAa,EACbG,QAAQ,KAEV,SAAC,KAAD,CACED,OAAQ,CACNpB,EAAWD,EAAiB,IAC5BG,EAAU,GACVF,EAAWD,EAAiB,IAC5BG,EAAWJ,EAAiB,GAE9BmB,OAAO,QACPC,YAAa,EACbG,QAAQ,KAEV,SAAC,KAAD,CACEP,EAAGd,EAAWD,EAAiB,IAAO,EACtCgB,EAAGb,EAAU,GACboB,KAAM9B,EACNS,MAAO,IACPsB,MAAM,SACNE,SAAU,IACVD,SAAU,YAMrB,IAED,W","sources":["components/OurProducts/Konvas/Hugo.js"],"sourcesContent":["import { useState, useEffect, forwardRef, useRef, useImperativeHandle } from 'react';\nimport { Stage, Layer, Rect, Line, Text } from 'react-konva';\n\nconst Hugo = forwardRef(({\n  dimensions,\n  productWidth,\n  productDepth,\n}, ref) => {\n  const [scaleFactor, setScaleFactor] = useState(1);\n  const stageRef = useRef(null);\n\n  const sofaTotalDepth = productDepth * scaleFactor;\n  const sofaTotalWidth = productWidth * scaleFactor;\n\n  const offsetX = dimensions.width / 2;\n  const offsetY = dimensions.height / 2;\n\n  useEffect(() => {\n    const value = Math.min(\n      (0.7 * dimensions.width) / productWidth,\n      (0.7 * dimensions.height) / productDepth\n    );\n    if (value > 0) {\n      setScaleFactor(value);\n    }\n  }, [dimensions, productWidth, productDepth]);\n\n  useImperativeHandle(ref, () => ({\n    getImage() {\n      return stageRef.current.toDataURL({ mimeType: 'image/jpeg', quality: 1 });\n    }\n  }));\n\n  return (\n    <div>\n      <Stage ref={stageRef} width={dimensions.width} height={dimensions.height}>\n      <Layer>\n        <Rect\n            x={0}\n            y={0}\n            width={dimensions.width}\n            height={dimensions.height}\n            fill={'#FFF'}\n          />\n        </Layer>\n        <Layer>\n          <Rect\n            x={offsetX - (sofaTotalWidth / 2)}\n            y={offsetY - (sofaTotalDepth / 2)}\n            width={sofaTotalWidth}\n            height={20 * scaleFactor}\n            stroke=\"black\"\n            strokeWidth={1}\n            cornerRadius={3}\n          />\n          <Rect\n            x={offsetX - (sofaTotalWidth / 2)}\n            y={offsetY - (sofaTotalDepth / 2) + (20 * scaleFactor)}\n            width={sofaTotalWidth}\n            height={sofaTotalDepth - (20 * scaleFactor)}\n            stroke=\"black\"\n            strokeWidth={1}\n            cornerRadius={3}\n          />\n        </Layer>\n        <Layer>\n          <Line\n            points={[\n              offsetX + 50,\n              offsetY + (sofaTotalDepth / 1.4),\n              offsetX + (sofaTotalWidth / 2),\n              offsetY + (sofaTotalDepth / 1.4),\n            ]}\n            stroke=\"black\"\n            strokeWidth={1}\n            closed={false}\n          />\n          <Line\n            points={[\n              offsetX - 50,\n              offsetY + (sofaTotalDepth / 1.4),\n              offsetX - (sofaTotalWidth / 2),\n              offsetY + (sofaTotalDepth / 1.4),\n            ]}\n            stroke=\"black\"\n            strokeWidth={1}\n            closed={false}\n          />\n          <Text\n            x={offsetX - 50}\n            y={offsetY + (sofaTotalDepth / 1.4) - 9}\n            text={productWidth}\n            width={100}\n            align=\"center\"\n            fontSize={18}\n          />\n          <Line\n            points={[\n              offsetX - (sofaTotalWidth / 1.7),\n              offsetY - (sofaTotalDepth / 2),\n              offsetX - (sofaTotalWidth / 1.7),\n              offsetY - 50,\n            ]}\n            stroke=\"black\"\n            strokeWidth={1}\n            closed={false}\n          />\n          <Line\n            points={[\n              offsetX - (sofaTotalWidth / 1.7),\n              offsetY + 50,\n              offsetX - (sofaTotalWidth / 1.7),\n              offsetY + (sofaTotalDepth / 2),\n            ]}\n            stroke=\"black\"\n            strokeWidth={1}\n            closed={false}\n          />\n          <Text\n            x={offsetX - (sofaTotalWidth / 1.7) - 9}\n            y={offsetY + 50}\n            text={productDepth}\n            width={100}\n            align=\"center\"\n            rotation={270}\n            fontSize={18}\n          />\n        </Layer>\n      </Stage>\n    </div>\n  );\n})\n\nexport default Hugo;"],"names":["Hugo","forwardRef","ref","dimensions","productWidth","productDepth","useState","scaleFactor","setScaleFactor","stageRef","useRef","sofaTotalDepth","sofaTotalWidth","offsetX","width","offsetY","height","useEffect","value","Math","min","useImperativeHandle","getImage","current","toDataURL","mimeType","quality","x","y","fill","stroke","strokeWidth","cornerRadius","points","closed","text","align","fontSize","rotation"],"sourceRoot":""}