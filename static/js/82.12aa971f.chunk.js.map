{"version":3,"file":"static/js/82.12aa971f.chunk.js","mappings":"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","sources":["components/OurProducts/Konvas/Faynee-mini.js"],"sourcesContent":["import React, {\n  useState,\n  useEffect,\n  forwardRef,\n  useImperativeHandle,\n  useRef,\n} from 'react';\nimport { Stage, Layer, Rect, Line, Text } from 'react-konva';\n\nconst FayneeMini = forwardRef(\n  ({ dimensions, productWidth, productDepth, activeModules, setActiveModules }, ref) => {\n    const [scaleFactor, setScaleFactor] = useState(1);\n \n    const stageRef = useRef(null);\n\n    const sofaTotalDepth = productDepth * scaleFactor;\n    const sofaTotalWidth = productWidth * scaleFactor;\n\n    const armrestsWidth = 17.5 * scaleFactor;\n\n    const offsetX = dimensions.width / 2;\n    const offsetY = dimensions.height / 2;\n\n    useEffect(() => {\n      setActiveModules([\n          'ARML',\n          'FM01',\n          'FM02',\n          'ARMR',\n          'BKPL',\n        ])\n    }, [setActiveModules]);\n\n    useEffect(() => {\n      const value = Math.min(\n        (0.7 * dimensions.width) / productWidth,\n        (0.7 * dimensions.height) / productDepth\n      );\n      if (value > 0) {\n        setScaleFactor(value);\n      }\n    }, [dimensions, productWidth, productDepth]);\n\n    useImperativeHandle(ref, () => ({\n      getImage() {\n        return stageRef.current.toDataURL({\n          mimeType: 'image/jpeg',\n          quality: 1,\n        });\n      },\n    }));\n\n    const possibleModules = [\n      {\n        id: 'FM01',\n        position: { x: offsetX, y: offsetY },\n        mark: (position) => (\n          <Layer draggable={true}>\n            <Line\n              points={[\n                offsetX - sofaTotalWidth / 2 + armrestsWidth,\n                offsetY - sofaTotalDepth / 2 + 8 * scaleFactor,\n                offsetX - (sofaTotalWidth - armrestsWidth * 2) / 4,\n                offsetY - sofaTotalDepth / 2 + 3 * scaleFactor,\n                offsetX,\n                offsetY - sofaTotalDepth / 2 + 8 * scaleFactor,\n              ]}\n              stroke=\"black\"\n              strokeWidth={1}\n              closed={false}\n              lineJoin=\"round\"\n              tension={0.7}\n            />\n            <Rect\n              x={offsetX - sofaTotalWidth / 2 + armrestsWidth}\n              y={offsetY - sofaTotalDepth / 2 + 8 * scaleFactor}\n              width={(sofaTotalWidth - armrestsWidth * 2) / 2}\n              height={20 * scaleFactor}\n              stroke=\"black\"\n              strokeWidth={1}\n              cornerRadius={2}\n            />\n            <Rect\n              x={offsetX - sofaTotalWidth / 2 + armrestsWidth}\n              y={offsetY - sofaTotalDepth / 2 + 28 * scaleFactor}\n              width={(sofaTotalWidth - armrestsWidth * 2) / 2}\n              height={sofaTotalDepth - 28 * scaleFactor}\n              stroke=\"black\"\n              strokeWidth={1}\n              cornerRadius={4}\n            />\n          </Layer>\n        ),\n      },\n      {\n        id: 'FM02',\n        position: { x: offsetX + 200, y: offsetY },\n        mark: (position) => (\n          <Layer draggable={true}>\n            <Line\n              points={[\n                offsetX,\n                offsetY - sofaTotalDepth / 2 + 8 * scaleFactor,\n                offsetX + (sofaTotalWidth - armrestsWidth * 2) / 4,\n                offsetY - sofaTotalDepth / 2 + 3 * scaleFactor,\n                offsetX + (sofaTotalWidth - armrestsWidth * 2) / 2,\n                offsetY - sofaTotalDepth / 2 + 8 * scaleFactor,\n              ]}\n              stroke=\"black\"\n              strokeWidth={1}\n              closed={false}\n              lineJoin=\"round\"\n              tension={0.7}\n            />\n            <Rect\n              x={offsetX}\n              y={offsetY - sofaTotalDepth / 2 + 8 * scaleFactor}\n              width={(sofaTotalWidth - armrestsWidth * 2) / 2}\n              height={20 * scaleFactor}\n              stroke=\"black\"\n              strokeWidth={1}\n              cornerRadius={2}\n            />\n            <Rect\n              x={offsetX}\n              y={offsetY - sofaTotalDepth / 2 + 28 * scaleFactor}\n              width={(sofaTotalWidth - armrestsWidth * 2) / 2}\n              height={sofaTotalDepth - 28 * scaleFactor}\n              stroke=\"black\"\n              strokeWidth={1}\n              cornerRadius={4}\n            />\n          </Layer>\n        ),\n      },\n      {\n        id: 'ARML',\n        mark: (position) => (\n          <Layer draggable={true}>\n            <Line\n              points={[\n                offsetX - sofaTotalWidth / 2 + 2.5 * scaleFactor,\n                offsetY - sofaTotalDepth / 2,\n                offsetX - sofaTotalWidth / 2,\n                offsetY,\n                offsetX - sofaTotalWidth / 2 + 2.5 * scaleFactor,\n                offsetY + sofaTotalDepth / 2,\n              ]}\n              stroke=\"black\"\n              strokeWidth={1}\n              closed={false}\n              lineJoin=\"round\"\n              tension={1}\n            />\n            <Rect\n              x={offsetX - sofaTotalWidth / 2 + 2.5 * scaleFactor}\n              y={offsetY - sofaTotalDepth / 2}\n              width={armrestsWidth - 2.5 * scaleFactor}\n              height={sofaTotalDepth}\n              stroke=\"black\"\n              strokeWidth={1}\n              cornerRadius={[0, 3, 3, 0]}\n            />\n          </Layer>\n        ),\n      },\n      {\n        id: 'ARMR',\n        mark: (position) => (\n          <Layer draggable={true}>\n            <Line\n              points={[\n                offsetX + sofaTotalWidth / 2 - 2.5 * scaleFactor,\n                offsetY - sofaTotalDepth / 2,\n                offsetX + sofaTotalWidth / 2,\n                offsetY,\n                offsetX + sofaTotalWidth / 2 - 2.5 * scaleFactor,\n                offsetY + sofaTotalDepth / 2,\n              ]}\n              stroke=\"black\"\n              strokeWidth={1}\n              closed={false}\n              lineJoin=\"round\"\n              tension={1}\n            />\n            <Rect\n              x={offsetX + sofaTotalWidth / 2 - armrestsWidth}\n              y={offsetY - sofaTotalDepth / 2}\n              width={armrestsWidth - 2.5 * scaleFactor}\n              height={sofaTotalDepth}\n              stroke=\"black\"\n              strokeWidth={1}\n              cornerRadius={[3, 0, 0, 3]}\n            />\n          </Layer>\n        ),\n      },\n      {\n        id: 'BKPL',\n        mark: (position) => (\n          <Layer draggable={true}>\n            <Rect\n              x={offsetX - sofaTotalWidth / 2 + armrestsWidth}\n              y={offsetY - sofaTotalDepth / 2}\n              width={sofaTotalWidth - armrestsWidth * 2}\n              height={3 * scaleFactor}\n              stroke=\"black\"\n              strokeWidth={1}\n              cornerRadius={[3, 3, 0, 0]}\n            />\n          </Layer>\n        ),\n      },\n    ];\n\n    return (\n      <div>\n        <Stage\n          ref={stageRef}\n          width={dimensions.width}\n          height={dimensions.height}\n        >\n          <Layer>\n            <Rect\n              x={0}\n              y={0}\n              width={dimensions.width}\n              height={dimensions.height}\n              fill={'#FFF'}\n            />\n          </Layer>\n          {activeModules.forEach(id => (\n              <React.Fragment key={id}>\n                {possibleModules.find(module => module.id === id).mark()}\n              </React.Fragment>\n            ))}\n          <Layer>\n            <Line\n              points={[\n                offsetX + 50,\n                offsetY + sofaTotalDepth / 1.4,\n                offsetX + sofaTotalWidth / 2,\n                offsetY + sofaTotalDepth / 1.4,\n              ]}\n              stroke=\"black\"\n              strokeWidth={1}\n              closed={false}\n            />\n            <Line\n              points={[\n                offsetX - 50,\n                offsetY + sofaTotalDepth / 1.4,\n                offsetX - sofaTotalWidth / 2,\n                offsetY + sofaTotalDepth / 1.4,\n              ]}\n              stroke=\"black\"\n              strokeWidth={1}\n              closed={false}\n            />\n            <Text\n              x={offsetX - 50}\n              y={offsetY + sofaTotalDepth / 1.4 - 9}\n              text={productWidth}\n              width={100}\n              align=\"center\"\n              fontSize={18}\n            />\n            <Line\n              points={[\n                offsetX - sofaTotalWidth / 1.7,\n                offsetY - sofaTotalDepth / 2,\n                offsetX - sofaTotalWidth / 1.7,\n                offsetY - 50,\n              ]}\n              stroke=\"black\"\n              strokeWidth={1}\n              closed={false}\n            />\n            <Line\n              points={[\n                offsetX - sofaTotalWidth / 1.7,\n                offsetY + 50,\n                offsetX - sofaTotalWidth / 1.7,\n                offsetY + sofaTotalDepth / 2,\n              ]}\n              stroke=\"black\"\n              strokeWidth={1}\n              closed={false}\n            />\n            <Text\n              x={offsetX - sofaTotalWidth / 1.7 - 9}\n              y={offsetY + 50}\n              text={productDepth}\n              width={100}\n              align=\"center\"\n              rotation={270}\n              fontSize={18}\n            />\n          </Layer>\n        </Stage>\n      </div>\n    );\n  }\n);\n\nexport default FayneeMini;\n"],"names":["FayneeMini","forwardRef","ref","dimensions","productWidth","productDepth","activeModules","setActiveModules","useState","scaleFactor","setScaleFactor","stageRef","useRef","sofaTotalDepth","sofaTotalWidth","armrestsWidth","offsetX","width","offsetY","height","useEffect","value","Math","min","useImperativeHandle","getImage","current","toDataURL","mimeType","quality","possibleModules","id","position","x","y","mark","draggable","points","stroke","strokeWidth","closed","lineJoin","tension","cornerRadius","fill","forEach","find","module","text","align","fontSize","rotation"],"sourceRoot":""}